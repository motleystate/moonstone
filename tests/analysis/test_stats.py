from unittest import TestCase
import pandas as pd
from moonstone.analysis.stats import (
    FilteringStats
)


class TestFilteringStats(TestCase):

    def test_by_mean(self):
        tested_object = pd.DataFrame.from_dict(
            {
                'specie_1': [10, 0, 0, 2],
                'specie_2': [25, 6, 3, 9],
                'specie_3': [9, 7, 8, 3],
                'specie_4': [3, 2, 1, 0],
                'specie_5': [8, 3, 0, 1],
            },
            orient='index', columns=['1', '2', '3', '4'])
        tested_object.columns.name = 'sample'
        tested_object_instance = FilteringStats(tested_object)
        expected_object = (
            {
                0.5: 5, 1.0: 5, 2.0: 4, 4.0: 2, 5.0: 2, 4.5: 2, 7.0: 1,
                8.0: 1, 9.0: 1, 9.700000000000001: 1, 9.5: 1, 1.5000000000000002: 4,
                7.7: 1, 5.5: 2, 4.8: 2, 6.0: 2, 0.2: 5, 2.3000000000000003: 4, 5.3: 2,
                2.8000000000000003: 4, 7.4: 1, 7.2: 1, 9.4: 1, 0.4: 5, 5.1: 2, 0.6: 5,
                8.9: 1, 3.2: 2, 1.1: 5, 0.8: 5, 4.7: 2, 1.8000000000000003: 4, 9.9: 1,
                2.2: 4, 7.5: 1, 5.6: 2, 9.8: 1, 1.6: 4, 0.30000000000000004: 5, 6.2: 2,
                8.5: 1, 9.2: 1, 3.7: 2, 3.5000000000000004: 2, 7.9: 1, 4.3999999999999995: 2,
                4.3: 2, 5.9: 2, 7.8: 1, 6.3: 2, 8.3: 1, 8.1: 1, 1.7000000000000002: 4,
                6.9: 1, 8.6: 1, 3.4000000000000004: 2, 8.8: 1, 2.9000000000000004: 4,
                6.5: 2, 6.1: 2, 9.1: 1, 2.7: 4, 6.7: 2, 5.4: 2, 4.6: 2, 3.1: 2, 4.2: 2,
                3.9000000000000004: 2, 3.0000000000000004: 2, 3.8000000000000003: 2,
                0.7000000000000001: 5, 2.6: 4, 6.4: 2, 0.9: 5, 9.6: 1, 0.1: 5,
                2.5000000000000004: 4, 2.1: 4, 8.7: 1, 3.6: 2, 6.8: 1, 7.3: 1,
                1.2000000000000002: 5, 1.4000000000000001: 5, 7.6: 1, 4.1: 2, 5.2: 2,
                1.9000000000000001: 4, 1.3000000000000003: 5, 4.9: 2, 8.2: 1, 9.3: 1,
                8.4: 1, 5.7: 2, 3.3000000000000003: 2, 6.6: 2, 2.4000000000000004: 4,
                7.1: 1, 5.8: 2
            },
            {
                0.5: 100, 1.0: 100, 2.0: 94, 4.0: 70, 5.0: 70, 4.5: 70, 7.0: 43,
                8.0: 43, 9.0: 43, 9.700000000000001: 43, 9.5: 43, 1.5000000000000002: 94,
                7.7: 43, 5.5: 70, 4.8: 70, 6.0: 70, 0.2: 100, 2.3000000000000003: 94,
                5.3: 70, 2.8000000000000003: 94, 7.4: 43, 7.2: 43, 9.4: 43, 0.4: 100,
                5.1: 70, 0.6: 100, 8.9: 43, 3.2: 70, 1.1: 100, 0.8: 100, 4.7: 70,
                1.8000000000000003: 94, 9.9: 43, 2.2: 94, 7.5: 43, 5.6: 70, 9.8: 43, 1.6: 94,
                0.30000000000000004: 100, 6.2: 70, 8.5: 43, 9.2: 43, 3.7: 70,
                3.5000000000000004: 70, 7.9: 43, 4.3999999999999995: 70, 4.3: 70, 5.9: 70,
                7.8: 43, 6.3: 70, 8.3: 43, 8.1: 43, 1.7000000000000002: 94, 6.9: 43, 8.6: 43,
                3.4000000000000004: 70, 8.8: 43, 2.9000000000000004: 94, 6.5: 70, 6.1: 70, 9.1: 43,
                2.7: 94, 6.7: 70, 5.4: 70, 4.6: 70, 3.1: 70, 4.2: 70, 3.9000000000000004: 70,
                3.0000000000000004: 70, 3.8000000000000003: 70, 0.7000000000000001: 100, 2.6: 94,
                6.4: 70, 0.9: 100, 9.6: 43, 0.1: 100, 2.5000000000000004: 94, 2.1: 94, 8.7: 43,
                3.6: 70, 6.8: 43, 7.3: 43, 1.2000000000000002: 100, 1.4000000000000001: 100, 7.6: 43,
                4.1: 70, 5.2: 70, 1.9000000000000001: 94, 1.3000000000000003: 100, 4.9: 70, 8.2: 43,
                9.3: 43, 8.4: 43, 5.7: 70, 3.3000000000000003: 70, 6.6: 70, 2.4000000000000004: 94,
                7.1: 43, 5.8: 70
            }
        )
        result_object = tested_object_instance.by_mean()
        self.assertDictEqual(result_object[0], expected_object[0])
        self.assertDictEqual(result_object[1], expected_object[1])
